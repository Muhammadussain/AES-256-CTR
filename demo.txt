module subBytes_FSM(
    input clk,
    input rst_n,
    input start,
    input [127:0] in,
    output reg [127:0] out,
    output reg done
);
    // State declaration
    typedef enum logic [2:0] {
        IDLE,
        LOAD,
        PROCESS,
        STORE,
        DONE
    } state_t;
    state_t state, next_state;

    // Registers for input and output
    reg [127:0] in_reg;
    reg [127:0] out_reg;
    reg [3:0] index; // Index for 8-bit chunks

    // S-box instantiation
    wire [7:0] sbox_in;
    wire [7:0] sbox_out;

    assign sbox_in = in_reg[index * 8 +: 8];

    sbox s (
        .in(sbox_in),
        .out(sbox_out)
    );

    // State transition
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)
            state <= IDLE;
        else
            state <= next_state;
    end

    // Next state logic
    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (start)
                    next_state = LOAD;
            end
            LOAD: begin
                next_state = PROCESS;
            end
            PROCESS: begin
                if (index == 15)
                    next_state = STORE;
                else
                    next_state = PROCESS;
            end
            STORE: begin
                next_state = DONE;
            end
            DONE: begin
                if (!start)
                    next_state = IDLE;
            end
        endcase
    end

    // Output and index control
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            in_reg <= 128'b0;
            out_reg <= 128'b0;
            index <= 4'b0;
            done <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    done <= 1'b0;
                end
                LOAD: begin
                    in_reg <= in;
                    index <= 4'b0;
                end
                PROCESS: begin
                    out_reg[index * 8 +: 8] <= sbox_out;
                    index <= index + 1;
                end
                STORE: begin
                    out <= out_reg;
                end
                DONE: begin
                    done <= 1'b1;
                end
            endcase
        end
    end
endmodule

// Example S-box module for reference
module sbox(
    input [7:0] in,
    output [7:0] out
);
    // S-box substitution logic (example)
    assign out = ~in; // Invert bits as a placeholder for actual S-box
endmodule


iverilog -o key_expansion.out key_expansion.v key_expansion_tb.v
vvp keyexpansion_tb.out
